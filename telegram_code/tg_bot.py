import json
import logging
import os
import time
from datetime import datetime, timedelta
from enum import Enum, auto
from textwrap import dedent
from typing import Dict
from telegram.utils.request import Request

import environs
import phonenumbers
import requests
import telegram
from bs4 import BeautifulSoup
from more_itertools import chunked
from telegram import (Bot, Chat, InlineKeyboardButton, InlineKeyboardMarkup,
                      KeyboardButton, LabeledPrice, Message, ParseMode,
                      ReplyKeyboardMarkup, Update)
from telegram.ext import (CallbackContext, CallbackQueryHandler,
                          CommandHandler, ConversationHandler, Filters,
                          MessageHandler, PreCheckoutQueryHandler, Updater)

from text_filters import (ValidLessonFilter, ValidPracticeFilter,
                          ValidTariffFilter, ValidTestsFilter,
                          ValidTopicFilter, ValidVideoFilter)
from utils import (call_api_get, call_api_post, clean_html,
                   delete_previous_messages, download_youtube_video,
                   validate_phone_number)

class States(Enum):
    MAIN_MENU = auto()
    TOPICS_MENU = auto()
    TOPIC = auto()
    ADMIN = auto()
    ACCEPT_PRIVACY = auto()
    START_REGISTRATION = auto()
    USER_FULLNAME = auto()
    USER_EMAIL = auto()
    USER_PHONE_NUMBER = auto()
    TEST_LEVEL = auto()
    TEST_START = auto()
    TEST_QUESTION = auto()
    TEST_RESULT = auto()
    TARIFF = auto()
    PAYMENT = auto()
    AVAILABLE_TOPIC = auto()
    AVAILABLE_LESSON = auto()
    AVAILABLE_ITEMS = auto()
    AVAILABLE_CONTENT = auto()
    AVAILABLE_QUESTION = auto()
    AVAILABLE_FINISH = auto()
    AVAILABLE_FINISH_VIDEO = auto()
    AVAILABLE_FINISH_TEST = auto()
    AVAILABLE_FINISH_PRACTICE = auto()
    ADMIN_ANSWER = auto()
    PRACTICE = auto()
    INVOICE = auto()


logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


def get_telegram_id(update: Update, context: CallbackContext) -> int:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç telegram_id –∏–∑ update –∏–ª–∏ context."""
    if update.callback_query:
        return context.user_data.get("telegram_id", update.effective_user.id)
    return update.message.from_user.id


def get_user_role(telegram_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API."""
    try:
        response = call_api_get(f"bot/tg_user/{telegram_id}")
        response.raise_for_status()
        user_data = response.json()
        return user_data.get("role", "user")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return "user"


def handle_api_error(update: Update, context: CallbackContext, error: Exception, chat_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ ADMIN."""
    delete_previous_messages(context, chat_id)
    menu_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    telegram_id = get_telegram_id(update, context)
    error_msg = dedent(f"""\
        <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>
        {str(error)}

        <b>telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
        {telegram_id}
    """).replace("  ", "")
    context.user_data['tariff_show_error'] = error_msg
    is_callback = bool(update.callback_query)
    keyboard = [["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üõ† –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω—É"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    admin_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)

    if 'prev_message_ids' not in context.user_data:
        context.user_data['prev_message_ids'] = []
    context.user_data['prev_message_ids'].append(admin_message_id)


def send_message_bot(context: CallbackContext, update: Update, text: str, markup, is_callback: bool = False,
                     chat_id: int = None) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update (callback –∏–ª–∏ message) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id."""
    if chat_id is None:
        if is_callback and update and update.callback_query:
            chat_id = update.callback_query.message.chat.id
        elif update and update.effective_message:
            chat_id = update.effective_chat.id
        else:
            chat_id = context.user_data.get('chat_id')
            if not chat_id:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id")

    message = context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )
    return message.message_id


def add_content_via_api(endpoint: str, payload: Dict, context: CallbackContext, update: Update = None) -> [Dict, str, Dict]:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ.

    Args:
        endpoint: URL API (–Ω–∞–ø—Ä–∏–º–µ—Ä, '/bot/next_content/add/').
        payload: –î–∞–Ω–Ω—ã–µ –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, {'user_id': 1, 'video_id': 2}).
        context: CallbackContext –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.
        update: Update –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        response = call_api_post(endpoint, payload)
        response.raise_for_status()
        content_data = response.json()
        next_content = content_data.get("next_content", {})
        next_step = content_data.get("next_step", None)
        next_step_params = content_data.get("next_step_params", {})
        if not next_content:
            logger.warning(f"–ù–µ—Ç next_content –≤ –æ—Ç–≤–µ—Ç–µ API: {content_data}")
        return next_content, next_step, next_step_params
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API ({endpoint}): {str(e)}")
        send_message_bot(context, update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.", None, False)
        return {}


def format_content_message(next_content: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ.
    """
    topics_str = "\n".join(next_content.get('next_topics_name', ['–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–º'])) or "–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–º"
    lessons_str = "\n".join(next_content.get('next_lessons_name', ['–ù–µ—Ç –Ω–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤'])) or "–ù–µ—Ç –Ω–æ–≤—ã—Ö —É—Ä–æ–∫–æ–≤"
    videos_str = "\n".join(next_content.get('next_videos_name', ['–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ'])) or "–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ"
    tests_str = "\n".join(next_content.get('next_tests_name', ['–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤'])) or "–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤"
    practices_str = "\n".join(next_content.get('next_practices_name', ['–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫'])) or "–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫"

    return dedent(f"""\
        –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏, –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:
        <b>–¢–µ–º—ã:</b>
        {topics_str}
        <b>–£—Ä–æ–∫–∏:</b>
        {lessons_str}
        <b>–í–∏–¥–µ–æ:</b>
        {videos_str}
        <b>–¢–µ—Å—Ç—ã:</b>
        {tests_str}
        <b>–ü—Ä–∞–∫—Ç–∏–∫–∏:</b>
        {practices_str}
    """).replace("  ", "")


def format_done_message(content_done: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ.
    """
    topics_str = "\n".join(
        content_done.get('names_done', {}).get('names_done_topics', ['–ù–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–º'])) or "–ù–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ–º"
    lessons_str = "\n".join(content_done.get('names_done', {}).get('names_done_lessons', [
        '–ù–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤'])) or "–ù–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤"
    videos_str = "\n".join(
        content_done.get('names_done', {}).get('names_done_videos', ['–ù–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ'])) or "–ù–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"
    tests_str = "\n".join(content_done.get('names_done', {}).get('names_done_tests',
                                                                 ['–ù–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤'])) or "–ù–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
    practices_str = "\n".join(content_done.get('names_done', {}).get('names_done_practices', [
        '–ù–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫'])) or "–ù–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫"

    topics_done = content_done['quantity_done']['quantity_done_topics']
    lessons_done = content_done['quantity_done']['quantity_done_lessons']
    videos_done = content_done['quantity_done']['quantity_done_videos']
    tests_done = content_done['quantity_done']['quantity_done_tests']
    practices_done = content_done['quantity_done']['quantity_done_practices']

    topics_all = content_done['quantity_all']['topics']
    lessons_all = content_done['quantity_all']['lessons']
    videos_all = content_done['quantity_all']['videos']
    tests_all = content_done['quantity_all']['tests']
    practices_all = content_done['quantity_all']['practices']

    def calc_percentage(done, total):
        return int((done / total * 100) if total > 0 else 0)

    return dedent(f"""\
            –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:
            <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ–º {topics_done} –∏–∑ {topics_all}, –ü—Ä–æ–π–¥–µ–Ω–æ {calc_percentage(topics_done, topics_all)}% </b>
            <b>–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –¢–µ–º—ã:</b>
            {topics_str}
            <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Ä–æ–∫–æ–≤ {lessons_done} –∏–∑ {lessons_all}, –ü—Ä–æ–π–¥–µ–Ω–æ {calc_percentage(lessons_done, lessons_all)}% </b>
            <b>–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –£—Ä–æ–∫–∏:</b>
            {lessons_str}
            <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –≤–∏–¥–µ–æ {videos_done} –∏–∑ {videos_all}, –ü—Ä–æ–π–¥–µ–Ω–æ {calc_percentage(videos_done, videos_all)}% </b>
            <b>–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –í–∏–¥–µ–æ:</b>
            {videos_str}
            <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–µ—Å—Ç—ã {tests_done} –∏–∑ {tests_all}, –ü—Ä–æ–π–¥–µ–Ω–æ {calc_percentage(tests_done, tests_all)}% </b>
            <b>–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –¢–µ—Å—Ç—ã:</b>
            {tests_str}
            <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è {practices_done} –∏–∑ {practices_all}, –ü—Ä–æ–π–¥–µ–Ω–æ {calc_percentage(practices_done,
                                                                                                    practices_all)}% </b>
            <b>–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –ü—Ä–∞–∫—Ç–∏–∫–∏:</b>
            {practices_str}
        """).replace("  ", "")


def send_content_message(context: CallbackContext, message: str, chat_id: int = None, update: Update = None) -> int:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç message_id.
    """
    keyboard = [["üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
                ["–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è"]
                ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    is_callback = bool(update and update.callback_query) if update else False
    return send_message_bot(context, update, message, markup, is_callback, chat_id)


def get_menu_for_role(user_data: dict) -> tuple[str, list[list[str]]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    user_role = user_data["role"]
    user_contact = user_data["contact"]
    user_tg_name = user_data["tg_name"]

    if user_role in ['admin', 'client']:
        name = user_contact["firstname"] or user_tg_name
        text = dedent(f"""\
            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name}!

            –î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏–∑—É—á–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö (DWH). –¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–º, 
            –Ω–æ –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫–∞–º –∏ –≤–∏–¥–µ–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –≤–∏–¥–µ–æ

            –¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –∏ —Å—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞

            –ù—É —á—Ç–æ –∂ –¥–∞–≤–∞–π —É–∂–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º!!!!
        """)
        keyboard = [["üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã", "üñå –¢–∞—Ä–∏—Ñ"],
                    ["üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤", "üõ† –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω—É"],
                    ["‚§¥ –ü—Ä–æ–≥—Ä–µ—Å—ÅÔ∏è"]]
    elif user_contact:
        name = user_contact["firstname"]
        text = dedent(f"""\
            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!

            –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫—É—Ä—Å–æ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤" –∏–ª–∏ —Å—Ç–∞—Ç—å –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, 
            –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "üßë‚Äçüéìüë©‚Äçüéì –°—Ç–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º" –∏ –≤—ã–±—Ä–∞–≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ.
        """)
        keyboard = [["üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤", "üßë‚Äçüéìüë©‚Äçüéì –°—Ç–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º"],
                    ["üõ† –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω—É"]
                    ]
    else:
        name = user_tg_name
        text = dedent(f"""\
            –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!

            –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫—É—Ä—Å–æ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤" –∏–ª–∏ —Å—Ç–∞—Ç—å –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º, 
            –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "üßë‚Äçüéìüë©‚Äçüéì –°—Ç–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º" –∏ –≤—ã–±—Ä–∞–≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ.

            –ê —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, –ø—Ä–æ–π–¥—è —Ç–µ—Å—Ç 
            (–¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ)
        """)
        keyboard = [["üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤", "üßë‚Äçüéìüë©‚Äçüéì –°—Ç–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º"], ["‚ùì –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å", "üõ† –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω—É"]]

    return text, keyboard


def start(update: Update, context: CallbackContext) -> States:
    """
    –°—Ç–∞—Ä—Ç –±–æ—Ç–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –µ–≥–æ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ.
    """
    chat_id = update.message.chat_id
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    if 'prev_message_ids' not in context.user_data:
        context.user_data['prev_message_ids'] = []
    context.user_data['prev_message_ids'].append(update.message.message_id)

    is_callback = bool(update.callback_query)
    if is_callback:
        update.callback_query.answer()
        update.callback_query.delete_message()

    telegram_id = get_telegram_id(update, context)
    context.user_data["telegram_id"] = telegram_id
    response = call_api_get(f"bot/tg_user/{telegram_id}")

    if response.ok:
        user_data = response.json()
        menu_msg, keyboard = get_menu_for_role(user_data)
        context.user_data["user_id"] = user_data["user_id"]
    else:
        username = update.message.from_user.username or update.message.from_user.first_name
        menu_msg = dedent(f"""\
            –ü—Ä–∏–≤–µ—Ç, {username}!‚úåÔ∏è

            –≠—Ç–æ –±–æ—Ç –¥–ª—è –∫—É—Ä—Å–∞ –ó–∞–π—Ç–∏ –≤ –ò–¢. 
            –ó–¥–µ—Å—å –≤—ã –ø–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö, SQL, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Ç.–¥.

            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç –∫—É—Ä—Å, –∞ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å 
            –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, –ø—Ä–æ–π–¥—è —Ç–µ—Å—Ç (–¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ)
        """).replace("  ", "")
        keyboard = [["üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤", "üßë‚Äçüéìüë©‚Äçüéì –°—Ç–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º"], ["‚ùì –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å", "üõ† –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω—É"]]
        payload = {
            "tg_id": telegram_id,
            "tg_name": username,
        }
        try:
            call_api_post("/bot/user/add/", payload)
            logger.info(f"User {telegram_id} added to DB")
        except requests.RequestException as e:
            logger.error(f"Failed to add user {telegram_id}: {str(e)}")

    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    start_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)
    if 'prev_message_ids' not in context.user_data:
        context.user_data['prev_message_ids'] = []
    context.user_data['prev_message_ids'].append(start_message_id)
    return States.TOPICS_MENU


def get_topics_name(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–º –≤ –∫—É—Ä—Å–µ –∏ –≤—ã–¥–∞–µ—Ç –∏—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–Ω–æ–ø–æ–∫."""
    chat_id = update.message.chat_id
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º –º–µ–Ω—é
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    response = call_api_get(f"bot/topics/")
    response.raise_for_status()
    topics = response.json()
    topics_buttons = [topic["title"] for topic in topics]
    topics_buttons.extend(["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    keyboard = list(chunked(topics_buttons, 2))
    markup = ReplyKeyboardMarkup(keyboard,
                                 resize_keyboard=True,
                                 one_time_keyboard=True)
    menu_msg = dedent("""\
                –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É.
                """)
    is_callback = bool(update.callback_query)
    topic_message = send_message_bot(context, update, menu_msg, markup, is_callback)
    context.user_data['prev_message_ids'].append(topic_message)
    return States.TOPIC


def get_topic_info(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ."""
    topic_title = update.message.text
    chat_id = update.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    response = call_api_get(f"bot/topic/{topic_title}")
    try:
        response.raise_for_status()
        topic_data = response.json()
        description = clean_html(topic_data['description']) if topic_data['description'] else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        menu_msg = dedent(f"""\
            <b>–¢–µ–º–∞:</b>
            {topic_data['title']}

            <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
            {description}
        """).replace("  ", "")

        keyboard = [["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


        if topic_data['picture']:
            logger.info(f"Fetching picture: {topic_data['picture']}")
            try:
                picture_response = requests.get(topic_data['picture'], timeout=10)
                picture_response.raise_for_status()
                photo_message = update.message.reply_photo(
                    photo=picture_response.content,
                    caption=menu_msg,
                    parse_mode=ParseMode.HTML
                )
                context.user_data['prev_message_ids'].append(photo_message.message_id)
            except requests.RequestException as e:
                logger.warning(f"Failed to load picture: {e}")
                text_message = update.message.reply_text(menu_msg, parse_mode=ParseMode.HTML)
                context.user_data['prev_message_ids'].append(text_message.message_id)
        else:
            text_message = update.message.reply_text(menu_msg, parse_mode=ParseMode.HTML)
            context.user_data['prev_message_ids'].append(text_message.message_id)

        menu_message = update.message.reply_text(text='–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –º–µ–Ω—é', reply_markup=markup)
        context.user_data['prev_message_ids'].append(menu_message.message_id)
        return States.MAIN_MENU

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        handle_api_error(update, context, e, chat_id)
        return States.ADMIN


def handle_invalid_symbol(update: Update, context: CallbackContext) -> States:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–µ–º—ã."""
    chat_id = update.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    keyboard = [["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    message_id = send_message_bot(
        context, update,
        "‚ò†Ô∏è–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ ‚ò†Ô∏è",
        markup,
        is_callback=False
    )

    if 'prev_message_ids' not in context.user_data:
        context.user_data['prev_message_ids'] = []
    context.user_data['prev_message_ids'].append(message_id)

    return States.MAIN_MENU


def message_to_admin(update: Update, context: CallbackContext) -> States:
    message_id = update.message.message_id
    context.user_data['prev_message_ids'].append(message_id)
    menu_msg = '–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'
    message_to_admin = send_message_bot(context, update, menu_msg, markup=None, is_callback=False)
    context.user_data['prev_message_ids'].append(message_to_admin)
    return States.ADMIN


def send_to_admin(update: Update, context: CallbackContext) -> States:
    message_id = update.message.message_id
    context.user_data['prev_message_ids'].append(message_id)
    telegram_id = get_telegram_id(update, context)
    user_fullname = str(update.message.from_user['first_name']) + ' ' + str(update.message.from_user['last_name'])
    message = update.message.text

    menu_msg = dedent(f"""\
                <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</b>

                <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
                {message}
                """).replace("    ", "")
    message_keyboard = [['üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "üõ† –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω—É"]]
    markup = ReplyKeyboardMarkup(message_keyboard,
                                 resize_keyboard=True,
                                 one_time_keyboard=True)
    message_to_admin = send_message_bot(context, update, menu_msg, markup, is_callback=False)
    context.user_data['prev_message_ids'].append(message_to_admin)

    # –ü–æ–ª—É—á–∞–µ–º telegram_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
    response = call_api_get('bot/get_tg_admin')
    try:
        response.raise_for_status()
        admin_data = response.json()
        admin_telegram_id = admin_data['tg_id']
        update.message.chat.id = admin_telegram_id
        menu_msg = dedent(f"""\
                    <b>–ò–î –∫–ª–∏–µ–Ω—Ç–∞ - –¢–ì –∏–º—è:</b>
                    {telegram_id} - {user_fullname}
                    <b>–ó–∞–ø—Ä–æ—Å:</b>
                    {message}
                    <b>–î–ª—è –æ—Ç–≤–µ—Ç–∞ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É"</b>
                    """).replace("    ", "")
        keyboard = [[InlineKeyboardButton(f"–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"answer_client_{telegram_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_id = context.bot.send_message(
            chat_id=admin_telegram_id,
            text=menu_msg,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML).message_id
        update.message.chat.id = telegram_id
        return States.MAIN_MENU

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        is_callback = bool(update.callback_query)
        keyboard = [['üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "üõ† –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω—É"]]
        menu_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +7 980 300 45 45"
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        admin_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)
        context.user_data['prev_message_ids'].append(admin_message_id)
        return States.MAIN_MENU


def handle_message_from_client(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    callback_data = query.data
    client_chat_id = callback_data.split('_')[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data
    context.user_data['client_chat_id'] = client_chat_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –ø—Ä–æ—Å—å–±–æ–π –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç
    message = query.message.reply_text(text='–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –∏ –Ω–∞–∂–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
    context.user_data['prev_message_ids'].append(message.message_id)
    return States.ADMIN_ANSWER


def send_message_to_user(update, context):
    telegram_id = get_telegram_id(update, context)
    message_from_admin = update.message.text
    message_id = update.message.message_id
    context.user_data['prev_message_ids'].append(message_id)

    admin_name = str(update.message.from_user['first_name'])

    message_to_client = dedent(f"""\
                    <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {admin_name}</b>

                    <b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
                    {message_from_admin}
                    –î–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
                    """).replace("    ", "")
    update.message.chat.id = context.user_data['client_chat_id']
    admin_message_id = send_message_bot(context, update, message_to_client, markup=None, is_callback=False)
    context.user_data['prev_message_ids'].append(admin_message_id)

    update.message.chat.id = telegram_id
    message_keyboard = [['üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]

    markup = ReplyKeyboardMarkup(message_keyboard,
                                 resize_keyboard=True,
                                 one_time_keyboard=True)
    menu_msg = '—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    message_to_admin = send_message_bot(context, update, menu_msg, markup, is_callback=False)
    context.user_data['prev_message_ids'].append(message_to_admin)
    return States.MAIN_MENU


def start_registration(update: Update, context: CallbackContext) -> States:
    """–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–Ω—è—Ç—å –æ—Ñ–µ—Ä—Ç—É –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö."""

    chat_id = update.message.chat_id
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    message_keyboard = [['‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', '‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω']]
    markup = ReplyKeyboardMarkup(message_keyboard,
                                 resize_keyboard=True,
                                 one_time_keyboard=True)

    current_dir = os.path.dirname(__file__)
    file_path = os.path.abspath(os.path.join(current_dir, '..', 'media', 'documents', 'privacy_policy_statement.pdf'))

    with open(file_path, 'rb') as image:
        user_agreement_pdf = image.read()

    menu_msg = dedent("""\
    –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∏–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–§–ò–û, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, e_mail)
     –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.
    """).replace("  ", "")
    document_message = update.message.reply_document(
        user_agreement_pdf,
        filename="–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.pdf",
        caption=menu_msg,
        reply_markup=markup)
    context.user_data['prev_message_ids'] = [document_message.message_id]
    return States.ACCEPT_PRIVACY


def cancel_agreement(update: Update, context: CallbackContext) -> States:
    """ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –æ—Ñ–µ—Ä—Ç–æ–π."""
    chat_id = update.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    menu_msg = dedent("""
    –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≥–¥–∞ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –¥–∞—Ç—å –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∏–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É,
     –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º –∫—É—Ä—Å–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤". 
    –ê –≤–µ—Ä–Ω—É—Ç—Å—è –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ–π–¥—è –ø–æ —ç—Ç–æ–π –≤–µ—Ç–∫–µ.

    –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ —Å–µ–π—á–∞—Å - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ–≥–ª–∞—Å–∏—è –Ω–∏–∂–µ.
    """).replace("  ", "")

    keyboard = [['‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', '‚ùå –ù–µ—Ç'], ["üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤"]]

    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    is_callback = bool(update.callback_query)
    agree_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)

    context.user_data['prev_message_ids'].append(agree_message_id)
    return States.ACCEPT_PRIVACY


def start_user_registration(update: Update, context: CallbackContext) -> States:
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    chat_id = update.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    menu_msg = dedent("""
        üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—é –∏ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        """).replace("  ", "")

    keyboard = [["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]

    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    is_callback = bool(update.callback_query)
    registration_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)

    context.user_data['prev_message_ids'].append(registration_message_id)
    return States.START_REGISTRATION


def get_user_information(update: Update, context: CallbackContext) -> States:
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å context.user_data –¥–ª—è
    –±—É–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î.
    """
    message_answer_id = update.message.message_id
    context.user_data['prev_message_ids'].append(message_answer_id)
    words_in_user_answer = len(update.message.text.split())
    if words_in_user_answer != 3:
        incorrect_imput_message = update.message.reply_text(dedent("""\
        –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ú–æ–∂–µ—Ç –≤—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –≥–æ—Ä–æ–¥?

        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:
        """))
        context.user_data['prev_message_ids'].append(incorrect_imput_message.message_id)
        return States.START_REGISTRATION

    context.user_data["firstname"], context.user_data["secondname"], context.user_data["city"] = update.message.text.split()
    menu_msg = dedent("""
        üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à email –≤ —Ñ–æ—Ä–º–∞—Ç–µ user@rambler.com –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        """).replace("  ", "")
    keyboard = [["üîô –ù–∞–∑–∞–¥", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]

    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    is_callback = bool(update.callback_query)
    email_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)

    context.user_data['prev_message_ids'].append(email_message_id)
    return States.USER_EMAIL


def update_email(update: Update, context: CallbackContext) -> States:
    """
    –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º email –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –Ω–∞ —à–∞–≥–µ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    """
    message_answer_id = update.message.message_id
    context.user_data['prev_message_ids'].append(message_answer_id)
    menu_msg = dedent("""
        üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à email –≤ —Ñ–æ—Ä–º–∞—Ç–µ user@rambler.com –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        """).replace("  ", "")
    keyboard = [["üîô –ù–∞–∑–∞–¥", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]

    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    is_callback = bool(update.callback_query)
    email_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)

    context.user_data['prev_message_ids'].append(email_message_id)
    return States.USER_EMAIL


def get_user_email(update: Update, context: CallbackContext) -> States:
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å context.user_data –¥–ª—è
    –±—É–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î.
    """
    message_answer_id = update.message.message_id
    context.user_data['prev_message_ids'].append(message_answer_id)
    context.user_data['user_email'] = update.message.text

    keyboard = [
        [
            KeyboardButton(
                '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                request_contact=True)
        ],
        ["üîô –ù–∞–∑–∞–¥", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    markup = ReplyKeyboardMarkup(
        keyboard,
        one_time_keyboard=True,
        resize_keyboard=True)

    menu_msg = dedent("""
        üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 
        +7991112233 –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É
        """).replace("  ", "")

    is_callback = bool(update.callback_query)
    phone_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)
    context.user_data['prev_message_ids'].append(phone_message_id)
    return States.USER_PHONE_NUMBER


def send_contact_to_api(update: Update, context: CallbackContext, payload: dict) -> States:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ API –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç. –ò–¥–µ—Ç –ø–æ—Å–ª–µ get_user_phone_number"""
    try:
        response = call_api_post('/bot/contact/add/', payload)
        if response.ok:
            message_keyboard = [["üßë‚Äçüíª –¢–µ—Å—Ç", "–û–ø–ª–∞—Ç–∞"], ["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤"]]
            markup = ReplyKeyboardMarkup(message_keyboard, resize_keyboard=True, one_time_keyboard=True)
            menu_msg = dedent("""
            üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!
            –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ç–µ—Å—Ç—É –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
            """).replace("  ", "")
            is_callback = bool(update.callback_query)
            phone_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)
            context.user_data['prev_message_ids'].append(phone_message_id)
            return States.TEST_LEVEL
        else:
            errors = response.json()
            error_msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
            if 'email' in errors:
                error_msg += "- –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä, example@example.com)\n"
                message_id = send_message_bot(context, update, error_msg, markup=None, is_callback=False)
                context.user_data['prev_message_ids'].append(message_id)
                return States.USER_EMAIL
            if 'phonenumber' in errors:
                error_msg += "- –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567)\n"
                message_keyboard = [[KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)]]
                markup = ReplyKeyboardMarkup(message_keyboard, one_time_keyboard=True, resize_keyboard=True)
                message_id = send_message_bot(context, update, error_msg, markup, is_callback=False)
                context.user_data['prev_message_ids'].append(message_id)
                return States.USER_PHONE_NUMBER
            error_msg += f"- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {errors}"
            message_id = send_message_bot(context, update, error_msg, markup=None, is_callback=False)
            context.user_data['prev_message_ids'].append(message_id)
            return States.MAIN_MENU
    except requests.RequestException as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {str(e)}"
        message_id = send_message_bot(context, update, error_msg, markup=None, is_callback=False)
        context.user_data['prev_message_ids'].append(message_id)
        return States.MAIN_MENU


def get_user_phone_number(update: Update, context: CallbackContext) -> int:
    """–ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    message_answer_id = update.message.message_id
    context.user_data.setdefault('prev_message_ids', []).append(message_answer_id)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text

    is_valid, phone_number = validate_phone_number(phone)
    if not is_valid:
        message_keyboard = [[KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)]]
        markup = ReplyKeyboardMarkup(message_keyboard, one_time_keyboard=True, resize_keyboard=True)
        error_message = dedent("""\
        –í–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):
        """)
        message_id = update.message.reply_text(error_message, reply_markup=markup).message_id
        context.user_data['prev_message_ids'].append(message_id)
        return States.USER_PHONE_NUMBER

    context.user_data["phone_number"] = phone_number
    telegram_id = get_telegram_id(update, context)
    response = call_api_get(f"bot/tg_user/{telegram_id}")

    if response.ok:
        user_data = response.json()
        context.user_data["user_id"] = user_data["user_id"]

    payload = {
        "user": context.user_data["user_id"],
        "firstname": context.user_data.get("firstname", ""),
        "secondname": context.user_data.get("secondname", ""),
        "city": context.user_data.get("city", ""),
        "phonenumber": context.user_data["phone_number"],
        "email": context.user_data.get("user_email", "")
    }
    return send_contact_to_api(update, context, payload)


def start_test(update: Update, context: CallbackContext) -> States:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç."""
    test_title = update.message.text
    chat_id = update.message.chat_id
    if test_title == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è" or test_title == "üîÇ –ï—â–µ —Ä–∞–∑":
        test_title = context.user_data.get("test_title")
        if not test_title:
            context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞: —Ç–µ—Å—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
            return States.MAIN_MENU

    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    delete_previous_messages(context, chat_id)

    telegram_id = get_telegram_id(update, context)
    if not telegram_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegram_id")
        message_id = context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.",
                                              parse_mode=ParseMode.HTML)
        context.user_data['prev_message_ids'] = context.user_data.get('prev_message_ids', []) + [message_id]
        return States.MAIN_MENU

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = get_user_role(telegram_id)
    if user_role not in ('admin', 'client'):
        test_title = "–¢–µ—Å—Ç —É—Ä–æ–≤–Ω—è"

    response = call_api_get(f'bot/start_test/{test_title}')
    if response.ok:
        test_data = response.json()
        context.user_data['test_title'] = test_title
        context.user_data.update({
            'test_id': test_data['test_id'],
            'questions': test_data['questions'],
            'show_right_answer': test_data['show_right_answer'],
            'current_question_index': 0,
            'correct_answers': 0,
            'prev_message_ids': [],
            'chat_id': chat_id,
            'user_role': user_role,
            'user_id': context.user_data.get('user_id'),
            'telegram_id': telegram_id
        })
        return show_question(chat_id, context)
    else:
        message_id = context.bot.send_message(chat_id=chat_id, text="–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode=ParseMode.HTML)
        context.user_data['prev_message_ids'] = context.user_data.get('prev_message_ids', []) + [message_id]
        return States.TEST_LEVEL


def show_question(chat_id: int, context: CallbackContext) -> States:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞."""
    questions = context.user_data['questions']
    current_question_index = context.user_data['current_question_index']
    prev_message_ids = context.user_data['prev_message_ids']

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞."""
    if current_question_index >= len(questions):
        return show_test_result(chat_id, context)

    question = questions[current_question_index]
    answers = question['answers']
    answers_text = "\n".join([f"<b>{answer['serial_number']}</b>. {answer['description']}" for answer in answers])
    keyboard = [[str(answer['serial_number']) for answer in answers]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    msg = dedent(f"""
    –í–æ–ø—Ä–æ—Å {current_question_index + 1}/{len(questions)}:
    {question['description']}

    –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:
    {answers_text}

    <b>–î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ë–ï–ó –ü–†–û–ë–ï–õ–ê(–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,2).</b>
    """).replace("  ", "")

    picture = question.get('picture')
    if picture and isinstance(picture, str) and picture.strip():
        try:
            picture_response = requests.get(picture, timeout=5)
            picture_response.raise_for_status()
            message_id = context.bot.send_photo(
                chat_id=chat_id,
                photo=picture_response.content,
                caption=msg,
                reply_markup=markup,
                parse_mode=ParseMode.HTML
            ).message_id
        except (requests.RequestException, telegram.error.BadRequest) as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç.")
            message_id = context.bot.send_message(
                chat_id=chat_id,
                text=msg,
                reply_markup=markup,
                parse_mode=ParseMode.HTML
            ).message_id
    else:
        message_id = context.bot.send_message(
            chat_id=chat_id,
            text=msg,
            reply_markup=markup,
            parse_mode=ParseMode.HTML
        ).message_id

    prev_message_ids.append(message_id)
    context.user_data['prev_message_ids'] = prev_message_ids
    return States.TEST_QUESTION


def handle_answer(update: Update, context: CallbackContext) -> States:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = update.message.chat_id
    user_answer = update.message.text
    context.user_data['prev_message_ids'] = context.user_data.get('prev_message_ids', []) + [update.message.message_id]

    if 'questions' not in context.user_data or 'current_question_index' not in context.user_data:
        context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
                                 parse_mode=ParseMode.HTML)
        return States.TEST_LEVEL

    questions = context.user_data['questions']
    current_question_index = context.user_data['current_question_index']
    show_right_answer = context.user_data.get('show_right_answer', False)
    correct_answers = context.user_data['correct_answers']
    prev_message_ids = context.user_data['prev_message_ids']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ —Ç–µ—Å—Ç
    if current_question_index >= len(questions):
        context.bot.send_message(chat_id=chat_id, text="–¢–µ—Å—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã.", parse_mode=ParseMode.HTML)
        delete_previous_messages(context, chat_id, prev_message_ids)
        return States.MAIN_MENU

    question = questions[current_question_index]
    answers = question['answers']

    correct_answers_list = [a for a in answers if a['right']]
    correct_serial_numbers = {str(a['serial_number']) for a in answers if a['right']}

    try:
        user_answers = set(user_answer.split(',')) if user_answer else set()
    except ValueError:
        message_id = context.bot.send_message(chat_id=chat_id,
                                              text="–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,2).",
                                              parse_mode=ParseMode.HTML).message_id
        context.user_data['prev_message_ids'].append(message_id)

        return States.TEST_QUESTION

    if user_answers == correct_serial_numbers:
        correct_answers += 1
        msg = "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        message_id = context.bot.send_message(chat_id=chat_id, text=msg, reply_markup=None,
                                              parse_mode=ParseMode.HTML).message_id
    else:
        if show_right_answer:
            correct_descriptions = "\n".join([f"{a['serial_number']}. {a['description']}" for a in correct_answers_list])
            msg = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:\n{correct_descriptions}"
        else:
            msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."
        message_id = context.bot.send_message(chat_id=chat_id, text=msg, parse_mode=ParseMode.HTML).message_id

    context.user_data['prev_message_ids'].append(message_id)
    current_question_index += 1

    context.user_data.update({
        'current_question_index': current_question_index,
        'correct_answers': correct_answers,
        'prev_message_ids': prev_message_ids
    })

    return show_question(chat_id, context)


def show_test_result(chat_id: int, context: CallbackContext) -> States:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞."""
    prev_message_ids = context.user_data.get('prev_message_ids', [])
    delete_previous_messages(context, chat_id, prev_message_ids)

    questions = context.user_data['questions']
    correct_answers = context.user_data['correct_answers']
    user_role = context.user_data['user_role']
    user_id = context.user_data['user_id']
    test_id = context.user_data['test_id']

    total_questions = len(questions)
    percentage = (correct_answers / total_questions) * 100

    if user_role in ('admin', 'client'):
        if percentage >= 80:
            payload = {'user_id': user_id, 'test_id': test_id}
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: user_id={user_id}, test_id={test_id}")
            logger.info(f"payload: {payload}")
            result = add_content_via_api('/bot/next_content_test/add/', payload, context)
            if not result or result[0] is None:
                logger.error(f"Failed to add content, result: {result}")
                keyboard = [["üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
                markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
                message_id = context.bot.send_message(
                    chat_id=chat_id,
                    text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
                    reply_markup=markup,
                    parse_mode=ParseMode.HTML
                ).message_id
                context.user_data['prev_message_ids'].append(message_id)
                return States.MAIN_MENU

            next_content, next_step, next_step_params = result

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            menu_msg = format_content_message(next_content)
            message_id = send_content_message(context, menu_msg, chat_id=chat_id)
            context.user_data['prev_message_ids'].append(message_id)

            logger.info(f"Next step determined: {next_step}, params: {next_step_params}")

            if next_step == 'topic':
                context.user_data['topic_title'] = next_step_params.get('topic_title')
                return States.AVAILABLE_TOPIC
            elif next_step == 'lesson':
                context.user_data['topic_title'] = next_step_params.get('topic_title')
                context.user_data['lesson_title'] = next_step_params.get('lesson_title')
                return States.AVAILABLE_LESSON
            elif next_step == 'video':
                context.user_data['video_title'] = next_step_params.get('video_title')
                context.user_data['lesson_title'] = next_step_params.get('lesson_title')
                return States.AVAILABLE_FINISH_VIDEO
            elif next_step == 'test':
                context.user_data['test_title'] = next_step_params.get('test_title')
                return States.AVAILABLE_FINISH_TEST
            elif next_step == 'practice':
                context.user_data['practice_title'] = next_step_params.get('practice_title')
                context.user_data['lesson_title'] = next_step_params.get('lesson_title')
                return States.AVAILABLE_FINISH_PRACTICE
            else:
                return States.AVAILABLE_FINISH
        else:
            keyboard = [["üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
                        ["üîÇ –ï—â–µ —Ä–∞–∑"]]
            markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            message_id = context.bot.send_message(
                chat_id=chat_id,
                text="–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!",
                reply_markup=markup,
                parse_mode=ParseMode.HTML
            ).message_id
            context.user_data['prev_message_ids'].append(message_id)
            return States.MAIN_MENU

    result_msg = "{:.0f}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç \n".format(percentage)
    if percentage >= 80:
        result_msg += "üéâ –ú–æ–ª–æ–¥–µ—Ü! –¢—ã –Ω–∞–±—Ä–∞–ª –±–æ–ª–µ–µ 80% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."
    elif percentage >= 50:
        result_msg += "üëç –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –¢—ã –Ω–∞–±—Ä–∞–ª –±–æ–ª–µ–µ 50% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."
    else:
        result_msg += "üìö –ù–∞–¥–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å—Å—è! –¢—ã –Ω–∞–±—Ä–∞–ª –º–µ–Ω–µ–µ 50% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."

    keyboard = [["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–û–ø–ª–∞—Ç–∞"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    message_id = context.bot.send_message(
        chat_id=chat_id,
        text=result_msg,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    ).message_id
    context.user_data['prev_message_ids'] = [message_id]
    return States.TEST_QUESTION


def start_payment(update: Update, context: CallbackContext) -> States:
    """
    –°—Ç–∞—Ä—Ç –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ BotFather –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –ø—Ä–∏ –µ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    """
    chat_id = update.message.chat_id
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    telegram_id = get_telegram_id(update, context)
    response = call_api_get(f"bot/tg_user/{telegram_id}")
    response.raise_for_status()
    user_data = response.json()

    if user_data["contact"] and user_data["contact"]["firstname"] and user_data["contact"]["phonenumber"]:
        name = user_data["contact"]["firstname"]
        menu_msg = dedent(f"""\
                –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!

                –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞
            """)
        response = call_api_get(f"bot/tariffs/")
        response.raise_for_status()
        tariffs = response.json()
        tariffs_buttons = [tariff["title"] for tariff in tariffs]
        tariffs_buttons.extend(["üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤"])
        keyboard = list(chunked(tariffs_buttons, 2))
        markup = ReplyKeyboardMarkup(keyboard,
                                     resize_keyboard=True,
                                     one_time_keyboard=True)
        is_callback = bool(update.callback_query)
        registration_message = send_message_bot(context, update, menu_msg, markup, is_callback)
        context.user_data['prev_message_ids'] = [registration_message]
        return States.TARIFF

    else:
        name = user_data["tg_name"]
        menu_msg = dedent(f"""\
                        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!

                        –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è 
                    """)
        keyboard = [["üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        is_callback = bool(update.callback_query)
        registration_message = send_message_bot(context, update, menu_msg, markup, is_callback)
        context.user_data['prev_message_ids'] = [registration_message]
        return States.ACCEPT_PRIVACY


def get_tariff_info(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ."""
    tariff_title = update.message.text
    chat_id = update.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    response = call_api_get(f"bot/tariff/{tariff_title}")
    try:
        response.raise_for_status()
        tariff_data = response.json()
        description = clean_html(tariff_data['description']) if tariff_data['description'] else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        context.user_data['tariff_title'] = tariff_data['title']
        context.user_data['tariff_price'] = tariff_data['price']

        menu_msg = dedent(f"""\
            <b>–¢–∞—Ä–∏—Ñ:</b>
            {tariff_data['title']}

            <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
            {description}
            
            <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>
            {tariff_data['price']} —Ä—É–±
        """).replace("  ", "")

        keyboard = [["üîô –ù–∞–∑–∞–¥", "üíµ –û–ø–ª–∞—Ç–∏—Ç—å"],
                    ["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        is_callback = bool(update.callback_query)
        tariff_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)
        context.user_data['prev_message_ids'].append(tariff_message_id)
        return States.PAYMENT

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        handle_api_error(update, context, e, chat_id)
        return States.ADMIN


def send_payment(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞."""
    message_id = update.message.message_id
    context.user_data['prev_message_ids'].append(message_id)
    logger.info("send_payment called")
    chat_id = update.effective_chat.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ context.user_data
    try:
        tariff_title = context.user_data['tariff_title']
        tariff_price = int(context.user_data['tariff_price'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
        user_id = context.user_data['user_id']
        logger.info(f"Tariff: {tariff_title}, Price: {tariff_price}, User: {user_id}")
    except (KeyError, ValueError):
        error_message = context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
        context.user_data['prev_message_ids'].append(error_message.message_id)
        logger.error("Invalid tariff data")
        return States.MAIN_MENU

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è
    if tariff_price <= 0:
        error_price = context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        context.user_data['prev_message_ids'].append(error_price.message_id)
        logger.error("Non-positive price")
        return States.MAIN_MENU

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π payload
    payload = {
        'u': user_id,
        'a': tariff_price
    }

    payload_str = json.dumps(payload)
    logger.info(f"Payload: {payload_str}")
    context.user_data['last_payload'] = payload_str

    title = f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_title[:20]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
    description = f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ - {tariff_price} —Ä—É–±"
    currency = "RUB"
    prices = [LabeledPrice("üñå –¢–∞—Ä–∏—Ñ", tariff_price * 100)]

    try:
        invoice = context.bot.send_invoice(
            chat_id=chat_id,
            title=title,
            description=description,
            payload=payload_str,
            provider_token=provider_ukassa_token,
            currency=currency,
            prices=prices
        )
        if 'prev_message_ids' not in context.user_data:
            context.user_data['prev_message_ids'] = []
        context.user_data['prev_message_ids'].append(invoice.message_id)
        logger.info("Invoice sent successfully")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "üíµ –û–ø–ª–∞—Ç–∏—Ç—å" –ø–æ—Å–ª–µ –∏–Ω–≤–æ–π—Å–∞ —Ç.–∫. —é–∫–∞—Å—Å–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        keyboard = [[InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="process_payment")],
                    [InlineKeyboardButton("üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", callback_data="send_invoice")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message_id = context.bot.send_message(chat_id=chat_id, text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:",
                                 reply_markup=reply_markup).message_id
        context.user_data['prev_message_ids'].append(message_id)

    except Exception as e:
        error_invoice = context.bot.send_message(chat_id=chat_id, text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞: {str(e)}")
        context.user_data['prev_message_ids'].append(error_invoice.message_id)
        logger.error(f"Invoice creation failed: {str(e)}")
        return States.MAIN_MENU

    return States.PAYMENT


def precheckout_callback(update: Update, context: CallbackContext) -> None:
    logger.info("precheckout_callback called")
    query = update.pre_checkout_query
    logger.info(f"PreCheckoutQuery payload: {query.invoice_payload}")
    try:
        payload = json.loads(query.invoice_payload)
        if 'u' not in payload or 'a' not in payload:
            logger.error("Missing 'u' or 'a' in payload")
            query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        else:
            logger.info("Payload valid, answering OK")
            query.answer(ok=True)
    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error: {e}")
        query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç—ã.")


def process_payment(update: Update, context: CallbackContext) -> int:
    logger.info("process_payment called")
    query = update.callback_query
    query.answer()
    return successful_payment(update, context)


def successful_payment(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É."""
    logger.info("successful_payment called")
    chat_id = update.effective_chat.id if update.message else update.callback_query.message.chat_id

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º payload –∏–∑ context.user_data
    payload = json.loads(context.user_data['last_payload'])
    logger.info(f"Payment payload: {payload}")

    today = datetime.now().date()
    one_month_later = today + timedelta(days=30)
    tariff_title = context.user_data['tariff_title']
    full_payload = {
        'amount': payload['a'],
        'user': payload['u'],
        'access_date_start': str(today),
        'access_date_finish': str(one_month_later),
        'tariff': tariff_title,
        'status': "completed",
        'service_description': f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ {tariff_title}"
    }
    logger.info(f"Full payload for API: {full_payload}")
    try:
        response = call_api_post('/bot/payment/add/', full_payload)
        logger.info(f"API response: {response.status_code}, {response.text}")
        if response.ok:
            payload_content = {
                'user': payload['u'],
                'tariff': tariff_title,
            }
            response_content = call_api_post('/bot/start_content/add/', payload_content)
            response_content.raise_for_status()

            menu_msg = '–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞, –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –∫—É—Ä—Å–∞'
            keyboard = [["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
            markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

            if 'prev_message_ids' not in context.user_data:
                context.user_data['prev_message_ids'] = []

            is_callback = bool(update.callback_query)
            finish_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)
            context.user_data['prev_message_ids'].append(finish_message_id)
            return States.MAIN_MENU
        else:
            raise requests.RequestException(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code} - {response.text}")

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        handle_api_error(update, context, e, chat_id)
        return States.ADMIN


def send_invoice(update: Update, context: CallbackContext) -> States:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"""
    menu_msg = dedent(f"""
                    1. –°–¥–µ–ª–∞–π—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º
                    2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫ –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    3. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å —á–µ–∫–æ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                    """).replace("  ", "")
    message_to_admin = send_message_bot(context, update, menu_msg, markup=None, is_callback=False)
    context.user_data['prev_message_ids'].append(message_to_admin)
    return States.INVOICE


def send_invoice_to_admin(update: Update, context: CallbackContext) -> States:
    user_fullname = str(update.message.from_user['first_name']) + ' ' + str(update.message.from_user['last_name'])
    file_id = update.message.document.file_id
    file_info = context.bot.get_file(file_id)
    telegram_id = get_telegram_id(update, context)
    menu_msg = dedent(f"""\
                –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É,
                 –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏!
                """).replace("    ", "")
    message_keyboard = [['üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    markup = ReplyKeyboardMarkup(message_keyboard,
                                 resize_keyboard=True,
                                 one_time_keyboard=True)
    message_to_admin = send_message_bot(context, update, menu_msg, markup, is_callback=False)
    context.user_data['prev_message_ids'].append(message_to_admin)

    # –ü–æ–ª—É—á–∞–µ–º telegram_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
    response = call_api_get('bot/get_tg_admin')
    try:
        response.raise_for_status()
        admin_data = response.json()
        admin_telegram_id = admin_data['tg_id']
        update.message.chat.id = admin_telegram_id
        admin_message = dedent(f"""\
                    –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                    <b>–ò–î –∫–ª–∏–µ–Ω—Ç–∞ - –¢–ì –∏–º—è:</b>
                    {telegram_id} - {user_fullname}
                    <b>–ï—Å–ª–∏ —á–µ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —Ç–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –≤ –∞–¥–º–∏–Ω–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä—É—á–Ω—É—é –∏ 
                    –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–£—Ç–≤–µ—Ä–¥–∏—Ç—å'"</b>
                    <b>–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å, —Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É' –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è"</b>
                    """).replace("    ", "")

        keyboard = [[InlineKeyboardButton(f"–£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{telegram_id}")],
                    [InlineKeyboardButton(f"–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"answer_client_{telegram_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_document(
            chat_id=admin_telegram_id,
            document=file_info.file_id,
            caption=admin_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        return States.MAIN_MENU

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        is_callback = bool(update.callback_query)
        keyboard = [['üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "üõ† –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω—É"]]
        menu_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É" \
                   " –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +7 980 300 45 45"
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        admin_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)
        context.user_data['prev_message_ids'].append(admin_message_id)
        return States.MAIN_MENU


def get_admin_invoice_approval(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    callback_data = query.data
    telegram_id = get_telegram_id(update, context)  # chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ callback_data
    client_chat_id = callback_data.split('_')[-1]

    message_id = query.message.message_id
    context.user_data['prev_message_ids'].append(message_id)

    menu_msg = '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–ª–∏ /start'
    keyboard = [["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    message_id = context.bot.send_message(
        chat_id=telegram_id,
        text=menu_msg,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )
    context.user_data['prev_message_ids'].append(message_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ –∫–ª–∏–µ–Ω—Ç—É
    menu_msg = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏–ª –∏ —É—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —É—Ä–æ–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ "üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã"'
    keyboard = [["üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    message_id = context.bot.send_message(
        chat_id=client_chat_id,
        text=menu_msg,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    ).message_id
    context.user_data['prev_message_ids'].append(message_id)
    return States.AVAILABLE_FINISH  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


def show_tariff_info(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤—É—é—â–µ–º —Ç–∞—Ä–∏—Ñ–µ."""
    chat_id = update.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    telegram_id = get_telegram_id(update, context)
    response = call_api_get(f"bot/tg_user/{telegram_id}")

    try:
        response.raise_for_status()
        user_data = response.json()
        logger.info(f"User info: {user_data }")
        tariff_data = user_data['payments'][-1]
        tariff_title = tariff_data['tariff_detail']['title']
        tariff_price = tariff_data['tariff_detail']['price']
        tariff_description = clean_html(tariff_data['tariff_detail']['description']) if tariff_data[
            'tariff_detail']['description'] else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        tariff_date_start = tariff_data['access_date_start']
        formatted_tariff_date_start = datetime.strptime(tariff_date_start, '%Y-%m-%d').strftime('%d.%m.%Y')
        tariff_date_finish = tariff_data['access_date_finish']
        formatted_tariff_date_finish = datetime.strptime(tariff_date_finish, '%Y-%m-%d').strftime('%d.%m.%Y')
        user_name = user_data['contact']['firstname']

        menu_msg = dedent(f"""\
            <b>{user_name}, –í–∞—à –¢–∞—Ä–∏—Ñ:</b>
            {tariff_title}

            <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
            {tariff_description}

            <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b>
            {tariff_price} —Ä—É–±
            
            <b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:</b>
            –Ω–∞—á–∞–ª–æ - {formatted_tariff_date_start} 
            –æ–∫–æ–Ω—á–∞–Ω–∏–µ - {formatted_tariff_date_finish}
        """).replace("  ", "")

        keyboard = [["üîô –ù–∞–∑–∞–¥"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        is_callback = bool(update.callback_query)
        tariff_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)
        context.user_data['prev_message_ids'].append(tariff_message_id)
        return States.MAIN_MENU

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        handle_api_error(update, context, e, chat_id)
        return States.ADMIN


def get_available_topics_name(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—ã–¥–∞–µ—Ç –∏—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–Ω–æ–ø–æ–∫."""
    chat_id = update.message.chat_id
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    telegram_id = get_telegram_id(update, context)
    response = call_api_get(f"bot/available_topics/{telegram_id}")
    response.raise_for_status()

    availability = response.json()
    topics = availability['topics']
    logger.info(f"Topics for keyboard: {[topic['title'] for topic in topics]}")
    context.user_data['available_lessons'] = availability['lessons']
    topics_buttons = [topic["title"] for topic in topics]
    topics_buttons.extend(["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    keyboard = list(chunked(topics_buttons, 2))
    markup = ReplyKeyboardMarkup(keyboard,
                                 resize_keyboard=True,
                                 one_time_keyboard=True)
    menu_msg = dedent("""\
                –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É.
                """)
    is_callback = bool(update.callback_query)
    topic_message = send_message_bot(context, update, menu_msg, markup, is_callback)
    context.user_data['prev_message_ids'] = [topic_message]
    return States.AVAILABLE_TOPIC


def get_available_topic_info(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏ —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –≤ –Ω–µ–π"""
    topic_title = update.message.text
    if topic_title == 'üîô –ù–∞–∑–∞–¥' or topic_title == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è":
        topic_title = context.user_data["topic_title"]
    chat_id = update.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    context.user_data["topic_title"] = topic_title

    response = call_api_get(f"bot/topic/{topic_title}")
    try:
        response.raise_for_status()
        topic_data = response.json()
        description = clean_html(topic_data['description']) if topic_data['description'] else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        response_all_topic_lessons = call_api_get(f"bot/topic_lessons/{topic_title}")
        response_all_topic_lessons.raise_for_status()
        topic_lessons_data = response_all_topic_lessons.json()
        topic_lessons_id = [lesson["lesson_id"] for lesson in topic_lessons_data]

        menu_msg = dedent(f"""\
            <b>–¢–µ–º–∞:</b>
            {topic_data['title']}

            <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
            {description}
        """).replace("  ", "")

        telegram_id = get_telegram_id(update, context)
        response = call_api_get(f"bot/available_topics/{telegram_id}")
        response.raise_for_status()
        availability = response.json()
        topics_buttons = [lesson["title"] for lesson in availability['lessons'] if lesson["lesson_id"] in topic_lessons_id]
        topics_buttons.extend(["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîô –ù–∞–∑–∞–¥"])
        keyboard = list(chunked(topics_buttons, 2))
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)


        if topic_data['picture']:
            logger.info(f"Fetching picture: {topic_data['picture']}")
            try:
                picture_response = requests.get(topic_data['picture'], timeout=10)
                picture_response.raise_for_status()
                photo_message = update.message.reply_photo(
                    photo=picture_response.content,
                    caption=menu_msg,
                    parse_mode=ParseMode.HTML
                )
                context.user_data['prev_message_ids'].append(photo_message.message_id)
            except requests.RequestException as e:
                logger.warning(f"Failed to load picture: {e}")
                text_message = update.message.reply_text(menu_msg, parse_mode=ParseMode.HTML)
                context.user_data['prev_message_ids'].append(text_message.message_id)
        else:
            text_message = update.message.reply_text(menu_msg, parse_mode=ParseMode.HTML)
            context.user_data['prev_message_ids'].append(text_message.message_id)

        menu_message = update.message.reply_text(text='–í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏', reply_markup=markup)
        context.user_data['prev_message_ids'].append(menu_message.message_id)
        return States.AVAILABLE_LESSON

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        handle_api_error(update, context, e, chat_id)
        return States.ADMIN


def get_lesson_info(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É—Ä–æ–∫–µ"""
    lesson_title = update.message.text
    if lesson_title == 'üîô –ù–∞–∑–∞–¥' or lesson_title == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è":
        lesson_title = context.user_data["lesson_title"]
    chat_id = update.message.chat_id

    topic_title = context.user_data["topic_title"]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    response = call_api_get(f"bot/lesson/{topic_title}/{lesson_title}")
    try:
        response.raise_for_status()
        lesson_data = response.json()
        context.user_data["lesson_title"] = lesson_data['title']
        description = clean_html(lesson_data['description']) if lesson_data['description'] else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        menu_msg = dedent(f"""\
            <b>–£—Ä–æ–∫:</b>
            {lesson_data['title']}

            <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
            {description}
        """).replace("  ", "")

        keyboard = [["üé• –í–∏–¥–µ–æ —É—Ä–æ–∫–∏", "üßë‚Äçüíª –¢–µ—Å—Ç—ã"],
                   ["–ü—Ä–∞–∫—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"],
                   ["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]

        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        if lesson_data['picture']:
            logger.info(f"Fetching picture: {lesson_data['picture']}")
            try:
                lesson_response = requests.get(lesson_data['picture'])
                lesson_response.raise_for_status()
                photo_message = update.message.reply_photo(
                    photo=lesson_response.content,
                    caption=menu_msg,
                    parse_mode=ParseMode.HTML
                )
                context.user_data['prev_message_ids'].append(photo_message.message_id)
            except requests.RequestException as e:
                logger.warning(f"Failed to load picture: {e}")
                text_message = update.message.reply_text(menu_msg, parse_mode=ParseMode.HTML)
                context.user_data['prev_message_ids'].append(text_message.message_id)

        else:
            text_message = update.message.reply_text(menu_msg, parse_mode=ParseMode.HTML)
            context.user_data['prev_message_ids'].append(text_message.message_id)


        menu_message = update.message.reply_text(text='–ù–∞—á–∏–Ω–∞–π —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ', reply_markup=markup)
        context.user_data['prev_message_ids'].append(menu_message.message_id)
        return States.AVAILABLE_ITEMS

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        handle_api_error(update, context, e, chat_id)
        return States.ADMIN


def get_available_video_title(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É—Ä–æ–∫–µ"""
    chat_id = update.message.chat_id
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    try:
        lesson_title = context.user_data["lesson_title"]
        topic_title = context.user_data["topic_title"]
        response_all_lesson_video = call_api_get(f"bot/lesson_video/{topic_title}/{lesson_title}")
        response_all_lesson_video.raise_for_status()
        lesson_video_data = response_all_lesson_video.json()
        lesson_video_id = [lesson["video_id"] for lesson in lesson_video_data]

        telegram_id = get_telegram_id(update, context)
        response = call_api_get(f"bot/available_topics/{telegram_id}")
        response.raise_for_status()

        availability = response.json()
        videos = availability['videos']
        video_buttons = [video["title"] for video in videos if video["video_id"] in lesson_video_id]
        video_buttons.extend(["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîô –ù–∞–∑–∞–¥"])
        keyboard = list(chunked(video_buttons, 2))
        markup = ReplyKeyboardMarkup(keyboard,
                                     resize_keyboard=True,
                                     one_time_keyboard=True)
        menu_msg = dedent("""\
                    –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ. –õ–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥ –µ—Å–ª–∏ –≤ —ç—Ç–æ–º —É—Ä–æ–∫–µ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ.
                    """)
        is_callback = bool(update.callback_query)
        video_message = send_message_bot(context, update, menu_msg, markup, is_callback)
        context.user_data['prev_message_ids'] = [video_message]
        return States.AVAILABLE_CONTENT

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        handle_api_error(update, context, e, chat_id)
        return States.ADMIN


def get_video_info(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ"""
    video_title = update.message.text
    chat_id = update.message.chat_id

    if video_title == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è":
        video_title = context.user_data["video_title"]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    lesson_title = context.user_data["lesson_title"]
    response = call_api_get(f"bot/video/{lesson_title}/{video_title}")
    try:
        response.raise_for_status()
        video_data = response.json()

        video_link = video_data['video_link']
        context.user_data['video_id'] = video_data['video_id']
        video_message = context.bot.send_message(chat_id=chat_id, text=video_link)
        context.user_data['prev_message_ids'].append(video_message.message_id)

        if not video_data['summaries']:
            description = '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
        else:
            description = video_data['summaries'][0]['description']

        menu_msg = dedent(f"""\
                    <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
                    {description}
                """).replace("  ", "")

        keyboard = [["üîô –ù–∞–∑–∞–¥", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
                    ["–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        is_callback = bool(update.callback_query)
        description_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)
        context.user_data['prev_message_ids'].append(description_message_id)

        return States.AVAILABLE_QUESTION

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        handle_api_error(update, context, e, chat_id)
        return States.ADMIN


def get_video_control_question(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –≤–∏–¥–µ–æ."""
    chat_id = update.message.chat_id
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    video_id = context.user_data['video_id']
    response = call_api_get(f'bot/video_question/{video_id}')
    if response.ok:
        question = response.json()
        context.user_data['current_question'] = question
        answers = question['answers']
        context.user_data["answers"] = answers
        context.user_data["question_id"] = question.get('id')
        answers_text = "\n".join([f"<b>{answer['serial_number']}</b>. {answer['description']}" for answer in answers])
        keyboard = [[str(answer['serial_number']) for answer in answers]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        msg = dedent(f"""
                –í–æ–ø—Ä–æ—Å:
                {question['description']}

                –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:
                {answers_text}
                """).replace("  ", "")

        picture = question.get('picture')
        if picture and isinstance(picture, str) and picture.strip():
            try:
                picture_response = requests.get(picture, timeout=5)
                picture_response.raise_for_status()
                message_id = context.bot.send_photo(
                    chat_id=chat_id,
                    photo=picture_response.content,
                    caption=msg,
                    reply_markup=markup,
                    parse_mode=ParseMode.HTML
                ).message_id
            except (requests.RequestException, telegram.error.BadRequest) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                message_id = context.bot.send_message(
                    chat_id=chat_id,
                    text=msg,
                    reply_markup=markup,
                    parse_mode=ParseMode.HTML
                ).message_id
        else:
            message_id = context.bot.send_message(
                chat_id=chat_id,
                text=msg,
                reply_markup=markup,
                parse_mode=ParseMode.HTML
            ).message_id

        context.user_data['prev_message_ids'].append(message_id)
        return States.AVAILABLE_QUESTION
    else:
        logger.error(f"API error: {response.status_code} - {response.text}")
        keyboard = [["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        message_id = send_message_bot(context, update, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", markup, False)
        context.user_data['prev_message_ids'].append(message_id)
        return States.MAIN_MENU


def handle_video_question_answer(update: Update, context: CallbackContext) -> States:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    chat_id = update.message.chat_id
    user_answer = update.message.text
    context.user_data['prev_message_ids'].append(update.message.message_id)
    answers = context.user_data.get("answers", [])

    correct_answers_list = [a for a in answers if a['right']]
    correct_serial_numbers = [str(a['serial_number']) for a in correct_answers_list]

    if user_answer in correct_serial_numbers:
        msg = "üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        message_id = context.bot.send_message(
            chat_id=chat_id,
            text=msg,
            reply_markup=None,
            parse_mode=ParseMode.HTML
        ).message_id
        context.user_data['prev_message_ids'].append(message_id)
        video_id = context.user_data['video_id']
        telegram_id = get_telegram_id(update, context)
        response = call_api_get(f"bot/tg_user/{telegram_id}")
        if response.ok:
            user_data = response.json()
            user_id = user_data["user_id"]
        else:
            logger.error("User ID not found in context.user_data")
            send_message_bot(context, update, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.", None, False)
            return States.MAIN_MENU

        payload = {
            'user_id': user_id,
            'video_id': video_id,
        }
        logger.info(f"payload: {payload}")
        result = add_content_via_api('/bot/next_content/add/', payload, context, update)
        if not result or result[0] is None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ None
            logger.error(f"Failed to add content, result: {result}")
            return States.MAIN_MENU

        next_content, next_step, next_step_params = result

        if not next_content:
            # –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ add_content_via_api
            return States.MAIN_MENU
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        menu_msg = format_content_message(next_content)
        message_id = send_content_message(context, menu_msg, chat_id=chat_id)
        context.user_data['prev_message_ids'].append(message_id)

        logger.info(f"Next step determined: {next_step}, params: {next_step_params}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π States
        if next_step == 'topic':
            context.user_data['topic_title'] = next_step_params['topic_title']
            return States.AVAILABLE_TOPIC
        elif next_step == 'lesson':
            context.user_data['topic_title'] = next_step_params['topic_title']
            context.user_data['lesson_title'] = next_step_params['lesson_title']
            return States.AVAILABLE_LESSON
        elif next_step == 'video':
            context.user_data['video_title'] = next_step_params['video_title']
            context.user_data['lesson_title'] = next_step_params['lesson_title']
            return States.AVAILABLE_FINISH_VIDEO
        elif next_step == 'test':
            context.user_data['test_title'] = next_step_params['test_title']
            return States.AVAILABLE_FINISH_TEST
        elif next_step == 'practice':
            context.user_data['practice_title'] = next_step_params['practice_title']
            context.user_data['lesson_title'] = next_step_params['lesson_title']
            return States.AVAILABLE_FINISH_PRACTICE
        else:
            return States.AVAILABLE_FINISH

    else:
        msg = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞"
        message_id = context.bot.send_message(chat_id=chat_id, text=msg, parse_mode=ParseMode.HTML).message_id
        context.user_data['prev_message_ids'].append(message_id)

        time.sleep(1)

        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        question = context.user_data['current_question']
        answers_text = "\n".join([f"<b>{answer['serial_number']}</b>. {answer['description']}" for answer in answers])
        keyboard = [[str(answer['serial_number']) for answer in answers]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        msg = dedent(f"""
                    –í–æ–ø—Ä–æ—Å:
                    {question['description']}

                    –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:
                    {answers_text}
                    """).replace("  ", "")

        delete_previous_messages(context, chat_id)
        message_id = context.bot.send_message(
            chat_id=chat_id,
            text=msg,
            reply_markup=markup,
            parse_mode=ParseMode.HTML
        ).message_id
        context.user_data['prev_message_ids'].append(message_id)
        return States.AVAILABLE_QUESTION


def get_available_tests_title(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É—Ä–æ–∫–µ"""
    chat_id = update.message.chat_id
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    try:
        lesson_title = context.user_data["lesson_title"]
        topic_title = context.user_data["topic_title"]
        response_all_lesson_tests = call_api_get(f"bot/lesson_tests/{topic_title}/{lesson_title}")
        response_all_lesson_tests.raise_for_status()
        tests_data = response_all_lesson_tests.json()

        if not tests_data or (isinstance(tests_data, dict) and not tests_data.get('data')):
            logger.info(f"–¢–µ—Å—Ç—ã –¥–ª—è —É—Ä–æ–∫–∞ '{lesson_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            keyboard = [["üîô –ù–∞–∑–∞–¥", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
            markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            message_id = send_message_bot(
                context, update,
                "–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                markup, False
            )
            context.user_data['prev_message_ids'].append(message_id)
            return States.AVAILABLE_CONTENT

        tests_id = [test["test_id"] for test in tests_data]

        telegram_id = get_telegram_id(update, context)
        response = call_api_get(f"bot/available_topics/{telegram_id}")
        response.raise_for_status()

        availability = response.json()
        tests = availability['tests']
        test_buttons = [test["title"] for test in tests if test["test_id"] in tests_id]
        test_buttons.extend(["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîô –ù–∞–∑–∞–¥"])
        keyboard = list(chunked(test_buttons, 2))
        markup = ReplyKeyboardMarkup(keyboard,
                                     resize_keyboard=True,
                                     one_time_keyboard=True)
        menu_msg = dedent("""\
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç. –õ–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥ –µ—Å–ª–∏ –≤ —ç—Ç–æ–º —É—Ä–æ–∫–µ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
                    """)
        is_callback = bool(update.callback_query)
        test_message = send_message_bot(context, update, menu_msg, markup, is_callback)
        context.user_data['prev_message_ids'].append(test_message)
        return States.AVAILABLE_CONTENT

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        handle_api_error(update, context, e, chat_id)
        return States.ADMIN


def get_available_practices_title(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —É—Ä–æ–∫–µ"""
    chat_id = update.message.chat_id
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    try:
        lesson_title = context.user_data["lesson_title"]
        topic_title = context.user_data["topic_title"]
        response_all_lesson_practices = call_api_get(f"bot/lesson_practices/{topic_title}/{lesson_title}")
        response_all_lesson_practices.raise_for_status()
        practices_data = response_all_lesson_practices.json()

        if not practices_data or (isinstance(practices_data, dict) and not practices_data.get('data')):
            logger.info(f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —É—Ä–æ–∫–∞ '{lesson_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            keyboard = [["üîô –ù–∞–∑–∞–¥", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
            markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            message_id = send_message_bot(
                context, update,
                "–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                markup, False
            )
            context.user_data['prev_message_ids'].append(message_id)
            return States.AVAILABLE_CONTENT

        practices_id = [practice["practice_id"] for practice in practices_data]

        telegram_id = get_telegram_id(update, context)
        response = call_api_get(f"bot/available_topics/{telegram_id}")
        response.raise_for_status()

        availability = response.json()
        practices = availability['practices']
        practice_buttons = [practice["title"] for practice in practices if practice["practice_id"] in practices_id]
        practice_buttons.extend(["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "üîô –ù–∞–∑–∞–¥"])
        keyboard = list(chunked(practice_buttons, 2))
        markup = ReplyKeyboardMarkup(keyboard,
                                     resize_keyboard=True,
                                     one_time_keyboard=True)
        menu_msg = dedent("""\
                    –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –õ–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥ –µ—Å–ª–∏ –≤ —ç—Ç–æ–º —É—Ä–æ–∫–µ —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.
                    """)
        is_callback = bool(update.callback_query)
        practice_message = send_message_bot(context, update, menu_msg, markup, is_callback)
        context.user_data['prev_message_ids'].append(practice_message)
        return States.AVAILABLE_CONTENT

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        handle_api_error(update, context, e, chat_id)
        return States.ADMIN


def get_practice_info(update: Update, context: CallbackContext) -> States:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –∑–∞–¥–∞–Ω–∏–∏"""
    practice_title = update.message.text
    if practice_title == "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è":
        practice_title = context.user_data["practice_title"]

    context.user_data["practice_title"] = practice_title
    chat_id = update.message.chat_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º
    context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    lesson_title = context.user_data["lesson_title"]
    response = call_api_get(f"bot/practice/{lesson_title}/{practice_title}")

    try:
        response.raise_for_status()
        practice_data = response.json()
        context.user_data['practice_id'] = practice_data['practice_id']

        practice_exercise = practice_data.get('exercise')
        if not practice_exercise:
            raise ValueError("Exercise file not found or is empty!")
        practice_exercise_response = requests.get(practice_exercise, timeout=5)
        practice_exercise_response.raise_for_status()
        keyboard = [["üîô –ù–∞–∑–∞–¥", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
                    ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"]]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        message_id = context.bot.send_document(
            chat_id=chat_id,
            document=practice_exercise_response.content,
            filename=practice_title,
            caption="–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
            reply_markup=markup,
            parse_mode=ParseMode.HTML
        ).message_id
        context.user_data['prev_message_ids'].append(message_id)
        return States.PRACTICE

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        handle_api_error(update, context, e, chat_id)
        return States.ADMIN
    except ValueError as e:
        logger.error(f"File error: {str(e)}")
        message = context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        context.user_data['prev_message_ids'].append(message.message_id)
        handle_api_error(update, context, e, chat_id)
        return States.ADMIN


def send_practice_to_check(update: Update, context: CallbackContext) -> States:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ä–µ–≤—å—é–∏—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"""
    menu_msg = dedent(f"""
                    1. –°–¥–µ–ª–∞–π—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .doc
                    2. –ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"
                    3. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                    """).replace("  ", "")
    message_to_admin = send_message_bot(context, update, menu_msg, markup=None, is_callback=False)
    context.user_data['prev_message_ids'].append(message_to_admin)
    return States.PRACTICE


def send_practice_to_admin(update: Update, context: CallbackContext) -> States:
    user_fullname = str(update.message.from_user['first_name']) + ' ' + str(update.message.from_user['last_name'])
    file_id = update.message.document.file_id
    file_info = context.bot.get_file(file_id)
    telegram_id = get_telegram_id(update, context)
    menu_msg = dedent(f"""\
                –í–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É,
                 –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏!
                """).replace("    ", "")
    message_keyboard = [['üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    markup = ReplyKeyboardMarkup(message_keyboard,
                                 resize_keyboard=True,
                                 one_time_keyboard=True)
    message_to_admin = send_message_bot(context, update, menu_msg, markup, is_callback=False)
    context.user_data['prev_message_ids'].append(message_to_admin)

    # –ü–æ–ª—É—á–∞–µ–º telegram_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
    response = call_api_get('bot/get_tg_admin')
    try:
        response.raise_for_status()
        admin_data = response.json()
        admin_telegram_id = admin_data['tg_id']
        update.message.chat.id = admin_telegram_id
        lesson_title = context.user_data["lesson_title"]
        practice_title = context.user_data["practice_title"]
        practice_id = context.user_data['practice_id']
        admin_message = dedent(f"""\
                    –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                    <b>–ò–î –∫–ª–∏–µ–Ω—Ç–∞ - –¢–ì –∏–º—è:</b>
                    {telegram_id} - {user_fullname}
                    <b>–£—Ä–æ–∫ - –ü—Ä–∞–∫—Ç–∏–∫–∞:</b>
                    {lesson_title} - {practice_title}
                    <b>–ï—Å–ª–∏ –î–ó –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, —Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–£—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏ –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"</b>
                    <b>–ï—Å–ª–∏ –î–ó –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ, —Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É' –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∑–∞–º–µ—á–∞–Ω–∏—è"</b>
                    """).replace("    ", "")

        keyboard = [[InlineKeyboardButton(f"–£—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                          callback_data=f"practice_{practice_id}_{telegram_id}")],
                    [InlineKeyboardButton(f"–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", callback_data=f"answer_client_{telegram_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_document(
            chat_id=admin_telegram_id,
            document=file_info.file_id,
            caption=admin_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        return States.MAIN_MENU

    except requests.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
        is_callback = bool(update.callback_query)
        keyboard = [['üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', "üõ† –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω—É"]]
        menu_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É" \
                   " –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +7 980 300 45 45"
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        admin_message_id = send_message_bot(context, update, menu_msg, markup, is_callback)
        context.user_data['prev_message_ids'].append(admin_message_id)
        return States.MAIN_MENU


def not_send_document(update: Update, context: CallbackContext) -> States:
    message_id = update.message.message_id
    context.user_data['prev_message_ids'].append(message_id)
    keyboard = [["üîô –ù–∞–∑–∞–¥", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
                ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    menu_msg = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É" –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º. \n' \
               '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ .doc'
    is_callback = bool(update.callback_query)
    practice_message = send_message_bot(context, update, menu_msg, markup, is_callback)
    context.user_data['prev_message_ids'].append(practice_message)
    return States.PRACTICE


def get_admin_approval(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    callback_data = query.data
    telegram_id = get_telegram_id(update, context)  # chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ callback_data
    client_chat_id = callback_data.split('_')[-1]
    practice_id = callback_data.split('_')[-2]

    message_id = query.message.message_id
    context.user_data['prev_message_ids'].append(message_id)

    menu_msg = '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–ª–∏ /start'
    keyboard = [["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    message_id = context.bot.send_message(
        chat_id=telegram_id,
        text=menu_msg,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )
    context.user_data['prev_message_ids'].append(message_id)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
    payload = {
        'practice_id': practice_id,
        'telegram_id': client_chat_id
    }
    next_content, next_step, next_step_params = add_content_via_api('/bot/next_content_practice/add/', payload,
                                                                   context, update)
    if not next_content:
        # –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ add_content_via_api
        return States.MAIN_MENU

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, context.bot_data)
    context.bot_data.setdefault('client_updates', {})[client_chat_id] = {
        'next_content': next_content,
        'next_step': next_step,
        'next_step_params': next_step_params
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ –∫–ª–∏–µ–Ω—Ç—É
    admin_answer = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏–ª –∏ —É—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ \n'
    menu_msg = admin_answer + format_content_message(next_content)

    keyboard = [["üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
                ["–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è"]
                ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    message_id = context.bot.send_message(
        chat_id=client_chat_id,
        text=menu_msg,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    ).message_id
    context.user_data['prev_message_ids'].append(message_id)

    logger.info(f"Next step determined: {next_step}, params: {next_step_params}")
    return States.AVAILABLE_FINISH  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


def get_next_step_after_practice(update: Update, context: CallbackContext) -> States:
    chat_id = update.effective_chat.id
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    delete_previous_messages(context, chat_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    client_updates = context.bot_data.get('client_updates', {}).get(str(chat_id))
    if not client_updates:
        context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", parse_mode=ParseMode.HTML)
        return States.MAIN_MENU

    next_step = client_updates['next_step']
    next_step_params = client_updates['next_step_params']

    # –û–±–Ω–æ–≤–ª—è–µ–º context.user_data –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    if next_step == 'topic':
        context.user_data['topic_title'] = next_step_params.get('topic_title')
    elif next_step == 'lesson':
        context.user_data['topic_title'] = next_step_params.get('topic_title')
        context.user_data['lesson_title'] = next_step_params.get('lesson_title')
    elif next_step == 'video':
        context.user_data['video_title'] = next_step_params.get('video_title')
        context.user_data['lesson_title'] = next_step_params.get('lesson_title')
    elif next_step == 'test':
        context.user_data['test_title'] = next_step_params.get('test_title')
    elif next_step == 'practice':
        context.user_data['practice_title'] = next_step_params.get('practice_title')
        context.user_data['lesson_title'] = next_step_params.get('lesson_title')

    menu_msg = "–ù–∞–∂–º–∏ –µ—â–µ —Ä–∞–∑ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥"
    telegram_id = get_telegram_id(update, context)
    keyboard = [["üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã", "üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
                ["–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è"]
                ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    message_id = context.bot.send_message(
        chat_id=telegram_id,
        text=menu_msg,
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    ).message_id
    context.user_data['prev_message_ids'].append(message_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if next_step == 'topic':
        return States.AVAILABLE_TOPIC
    elif next_step == 'lesson':
        return States.AVAILABLE_LESSON
    elif next_step == 'video':
        return States.AVAILABLE_FINISH_VIDEO
    elif next_step == 'test':
        return States.AVAILABLE_FINISH_TEST
    elif next_step == 'practice':
        return States.AVAILABLE_FINISH_PRACTICE
    return States.AVAILABLE_FINISH


def user_done_progress(update: Update, context: CallbackContext) -> States:
    """–ü—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º."""
    chat_id = update.effective_chat.id
    context.user_data['prev_message_ids'].append(update.message.message_id if update.message else None)
    telegram_id = get_telegram_id(update, context)

    try:
        response = call_api_get(f"bot/done_content/{telegram_id}")
        response.raise_for_status()
        done_content = response.json()
        menu_msg = format_done_message(done_content)
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        menu_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

    keyboard = [["üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    is_callback = bool(update and update.callback_query) if update else False
    message_id = send_message_bot(context, update, menu_msg, markup, is_callback, chat_id)
    context.user_data['prev_message_ids'].append(message_id)
    return States.MAIN_MENU


if __name__ == '__main__':
    env = environs.Env()
    env.read_env()
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )

    telegram_bot_token = env.str("TG_BOT_TOKEN")
    provider_ukassa_token = env.str("PAYMENT_UKASSA_TOKEN")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Request —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    request = Request(connect_timeout=10, read_timeout=30)  # 10 —Å–µ–∫ –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, 30 —Å–µ–∫ –Ω–∞ —á—Ç–µ–Ω–∏–µ
    bot = Bot(token=telegram_bot_token, request=request)

    # –°–æ–∑–¥–∞–Ω–∏–µ Updater —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –±–æ—Ç–æ–º
    updater = Updater(bot=bot, use_context=True)
    dispatcher = updater.dispatcher

    valid_topic_filter = ValidTopicFilter()
    valid_tariff_filter = ValidTariffFilter()
    valid_lesson_filter = ValidLessonFilter()
    valid_video_filter = ValidVideoFilter()
    valid_tests_filter = ValidTestsFilter()
    valid_practices_filter = ValidPracticeFilter()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            States.TOPICS_MENU: [
                            MessageHandler(
                                Filters.text("üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤"), get_topics_name
                            ),
                            MessageHandler(
                                Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                            ),
                            MessageHandler(
                                Filters.text("‚ùì –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å"), start_registration
                            ),
                            MessageHandler(
                                Filters.text("üßë‚Äçüéìüë©‚Äçüéì –°—Ç–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º"), start_payment
                            ),
                            MessageHandler(
                                Filters.text("üñå –¢–∞—Ä–∏—Ñ"), show_tariff_info
                            ),
                            MessageHandler(
                                Filters.text("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã"), get_available_topics_name
                            ),
                            MessageHandler(
                                Filters.text("üõ† –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω—É"), message_to_admin
                            ),
                            MessageHandler(
                                Filters.text("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è"), get_next_step_after_practice
                            ),
                            MessageHandler(
                                Filters.text("‚§¥ –ü—Ä–æ–≥—Ä–µ—Å—ÅÔ∏è"), user_done_progress
                            ),
                            CallbackQueryHandler(
                                handle_message_from_client, pattern='^answer_client_'
                            ),
                            CallbackQueryHandler(
                                get_admin_approval, pattern='^practice_'
                            ),
                            CallbackQueryHandler(
                                get_admin_invoice_approval, pattern='^approve_'
                            ),
                            MessageHandler(
                                Filters.text, handle_invalid_symbol
                            ),
                        ],
            States.TOPIC: [
                            MessageHandler(
                                Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                            ),
                            MessageHandler(
                                valid_topic_filter, get_topic_info
                            ),
                            MessageHandler(
                                Filters.text & ~valid_topic_filter, handle_invalid_symbol
                            ),
            ],
            States.MAIN_MENU: [
                            MessageHandler(
                                Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                            ),
                            MessageHandler(
                                Filters.text("üîô –ù–∞–∑–∞–¥"), start
                            ),
                            MessageHandler(
                                Filters.text("üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤"), get_topics_name
                            ),
                            MessageHandler(
                                Filters.text("‚ùì –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å"), start_registration
                            ),
                            MessageHandler(
                                Filters.text("üõ† –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω—É"), message_to_admin
                            ),
                            MessageHandler(
                                Filters.text("üîÇ –ï—â–µ —Ä–∞–∑"), start_test
                            ),
                            MessageHandler(
                                Filters.text("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è"), get_next_step_after_practice
                            ),
                            MessageHandler(
                                Filters.text("‚§¥ –ü—Ä–æ–≥—Ä–µ—Å—ÅÔ∏è"), user_done_progress
                            ),
                            CallbackQueryHandler(
                                get_admin_approval, pattern='^practice_'
                            ),
                            CallbackQueryHandler(
                                handle_message_from_client, pattern='^answer_client_'
                            ),
                            CallbackQueryHandler(
                                get_admin_invoice_approval, pattern='^approve_'
                            ),
                            MessageHandler(
                                Filters.text, handle_invalid_symbol
                            ),
            ],
            States.ACCEPT_PRIVACY: [
                            MessageHandler(
                                Filters.regex(r'^\s*(‚úÖ\s*)?–°–æ–≥–ª–∞—Å–µ–Ω\s*$'), start_user_registration
                            ),
                            MessageHandler(
                                Filters.regex(r'^\s*(‚ùå\s*)?–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω\s*$'), cancel_agreement
                            ),
                            MessageHandler(
                                Filters.text('‚ùå –ù–µ—Ç'), start
                            ),
                            MessageHandler(
                                Filters.text("üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤"), get_topics_name
                            ),
                            MessageHandler(
                                Filters.text('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'), start_registration
                            ),
                            MessageHandler(
                                Filters.text, handle_invalid_symbol
                            ),
            ],
            States.START_REGISTRATION: [
                            MessageHandler(
                                Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                            ),
                            MessageHandler(
                                Filters.text, get_user_information
                            )
            ],
            States.USER_EMAIL: [
                            MessageHandler(
                                Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                            ),
                            MessageHandler(
                                Filters.text("üîô –ù–∞–∑–∞–¥"), start_user_registration
                            ),
                            MessageHandler(
                                Filters.text, get_user_email
                )
            ],
            States.USER_PHONE_NUMBER: [
                            MessageHandler(
                                Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                            ),
                            MessageHandler(
                                Filters.text("üîô –ù–∞–∑–∞–¥"), update_email
                            ),
                            MessageHandler(
                                Filters.text, get_user_phone_number
                            ),
                            MessageHandler(
                                Filters.contact, get_user_phone_number
                            ),
                            MessageHandler(
                                Filters.text, handle_invalid_symbol
                            ),
            ],
            States.TEST_LEVEL: [
                            MessageHandler(
                                Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                            ),
                            MessageHandler(
                                Filters.text("üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤"), get_topics_name
                            ),
                            MessageHandler(
                                Filters.text("üßë‚Äçüíª –¢–µ—Å—Ç"), start_test
                            ),
                            MessageHandler(
                                Filters.text("–û–ø–ª–∞—Ç–∞"), start_payment
                            ),
                            MessageHandler(
                                Filters.text, handle_invalid_symbol
                            ),
            ],
            States.TEST_QUESTION: [
                            MessageHandler(
                                Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                            ),
                            MessageHandler(
                                Filters.text("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã"), get_available_topics_name
                            ),
                            MessageHandler(
                                Filters.text("–û–ø–ª–∞—Ç–∞"), start_payment
                            ),
                            MessageHandler(Filters.text, handle_answer),
            ],
            States.TARIFF: [
                           MessageHandler(
                                Filters.text("üóÇ –¢–µ–º—ã —É—Ä–æ–∫–æ–≤"), get_topics_name
                           ),
                           MessageHandler(
                                valid_tariff_filter, get_tariff_info
                           ),
                            MessageHandler(
                                Filters.text, handle_invalid_symbol
                           ),
            ],
            States.PAYMENT: [
                           MessageHandler(
                                Filters.text("üîô –ù–∞–∑–∞–¥"), start_payment
                           ),
                           MessageHandler(
                                Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                           ),
                           MessageHandler(
                                Filters.text("üíµ –û–ø–ª–∞—Ç–∏—Ç—å"), send_payment
                           ),
                           PreCheckoutQueryHandler(
                                precheckout_callback
                           ),
                           MessageHandler(
                                Filters.successful_payment, successful_payment
                           ),
                           CallbackQueryHandler(
                                process_payment, pattern="process_payment"
                           ),
                            CallbackQueryHandler(
                                send_invoice, pattern="send_invoice"
                            ),
                            MessageHandler(
                                Filters.text, handle_invalid_symbol
                           ),
            ],
            States.AVAILABLE_TOPIC: [
                          MessageHandler(
                                Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                          ),
                          MessageHandler(
                                Filters.text("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è"), get_available_topic_info
                          ),
                          MessageHandler(
                                valid_topic_filter, get_available_topic_info
                          ),
                          MessageHandler(
                                Filters.text & ~valid_topic_filter, handle_invalid_symbol
                          ),
            ],
            States.AVAILABLE_LESSON: [
                         MessageHandler(
                                Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                         ),
                        MessageHandler(
                            Filters.text("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è"), get_lesson_info
                        ),
                         MessageHandler(
                                valid_lesson_filter, get_lesson_info
                         ),
                         MessageHandler(
                                Filters.text("üîô –ù–∞–∑–∞–¥"), get_available_topics_name
                         ),
                         MessageHandler(
                             Filters.text, handle_invalid_symbol
                         ),
            ],
            States.AVAILABLE_ITEMS: [
                        MessageHandler(
                            Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                        ),
                        MessageHandler(
                            Filters.text("üé• –í–∏–¥–µ–æ —É—Ä–æ–∫–∏"), get_available_video_title
                        ),
                        MessageHandler(
                            Filters.text("üßë‚Äçüíª –¢–µ—Å—Ç—ã"), get_available_tests_title
                        ),
                        MessageHandler(
                            Filters.text("üîô –ù–∞–∑–∞–¥"), get_available_topic_info
                        ),
                        MessageHandler(
                            Filters.text("–ü—Ä–∞–∫—Ç–∏–∫–∞"), get_available_practices_title
                        ),
                        MessageHandler(
                            Filters.text, handle_invalid_symbol
                        ),
            ],
            States.AVAILABLE_CONTENT: [
                        MessageHandler(
                            Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                        ),
                        MessageHandler(
                            valid_video_filter, get_video_info
                        ),
                        MessageHandler(
                            valid_tests_filter, start_test
                        ),
                        MessageHandler(
                            valid_practices_filter, get_practice_info
                        ),
                        MessageHandler(
                            Filters.text("üîô –ù–∞–∑–∞–¥"), get_lesson_info
                        ),
                        MessageHandler(
                            Filters.text, handle_invalid_symbol
                        ),
            ],
            States.AVAILABLE_QUESTION: [
                        MessageHandler(
                            Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                        ),
                        MessageHandler(
                            Filters.text("üîô –ù–∞–∑–∞–¥"), get_available_video_title
                        ),
                        MessageHandler(
                            Filters.text("–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å"), get_video_control_question
                        ),
                        MessageHandler(
                            Filters.text, handle_video_question_answer
                        ),
            ],
            States.AVAILABLE_FINISH: [
                        MessageHandler(
                            Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                        ),
                        MessageHandler(
                            Filters.text("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã"), get_available_topics_name
                        ),
                    MessageHandler(
                        Filters.text("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è"), get_next_step_after_practice
                    ),
                        MessageHandler(
                            Filters.text, handle_invalid_symbol
                        ),
            ],
            States.AVAILABLE_FINISH_VIDEO: [
                MessageHandler(
                    Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                ),
                MessageHandler(
                    Filters.text("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã"), get_available_topics_name
                ),
                MessageHandler(
                    Filters.text("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è"), get_video_info
                ),
                MessageHandler(
                    Filters.text, handle_invalid_symbol
                ),
            ],
            States.AVAILABLE_FINISH_TEST: [
                MessageHandler(
                    Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                ),
                MessageHandler(
                    Filters.text("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã"), get_available_topics_name
                ),
                MessageHandler(
                    Filters.text("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è"), start_test
                ),
                MessageHandler(
                    Filters.text, handle_invalid_symbol
                ),
            ],
            States.AVAILABLE_FINISH_PRACTICE: [
                MessageHandler(
                    Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                ),
                MessageHandler(
                    Filters.text("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã"), get_available_topics_name
                ),
                MessageHandler(
                    Filters.text("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è"), get_practice_info
                ),
                MessageHandler(
                    Filters.text, handle_invalid_symbol
                ),
            ],
            States.ADMIN: [
                        MessageHandler(
                            Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                        ),
                        MessageHandler(
                            Filters.text("üõ† –ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω—É"), message_to_admin
                        ),
                        MessageHandler(
                            Filters.text, send_to_admin
                        ),
            ],
            States.ADMIN_ANSWER: [
                        CallbackQueryHandler(
                            handle_message_from_client, pattern='^answer_client_'
                        ),
                        CallbackQueryHandler(
                            get_admin_approval, pattern='^practice_'
                        ),
                        CallbackQueryHandler(
                            get_admin_invoice_approval, pattern='^approve_'
                        ),
                        MessageHandler(
                            Filters.text, send_message_to_user
                        ),
            ],
            States.PRACTICE: [
                        MessageHandler(
                            Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                        ),
                        MessageHandler(
                            Filters.text("üîô –ù–∞–∑–∞–¥"), get_available_practices_title
                        ),
                        MessageHandler(
                            Filters.text("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"), send_practice_to_check
                        ),
                        MessageHandler(
                            Filters.text("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚û°Ô∏è"), get_next_step_after_practice
                        ),
                        MessageHandler(
                            Filters.document, send_practice_to_admin
                        ),
                        MessageHandler(
                            Filters.photo, not_send_document
                        ),
                        MessageHandler(
                            Filters.text, not_send_document
                        ),
            ],
            States.INVOICE: [
                MessageHandler(
                    Filters.text("üìñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), start
                ),
                MessageHandler(
                    Filters.document, send_invoice_to_admin
                ),
                MessageHandler(
                    Filters.photo, not_send_document
                ),
                MessageHandler(
                    Filters.text, not_send_document
                ),
            ]
        },
        fallbacks=[],
        allow_reentry=True,
        name='bot_conversation',
        per_message=False,
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    def error_handler(update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        logger.error(f"Update {update} caused error {context.error}")
        if isinstance(context.error, telegram.error.TimedOut):
            update.message.reply_text(
                "‚è≥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        else:
            update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )


    dispatcher.add_error_handler(error_handler)
    dispatcher.add_handler(conv_handler)
    start_handler = CommandHandler('start', start)
    dispatcher.add_handler(start_handler)

    updater.start_polling()
    updater.idle()


# PAYMENT_UKASSA_TOKEN='381764678:TEST:55794'