# Generated by Django 5.1.7 on 2025-03-31 13:11

import django.contrib.postgres.fields
import django.db.models.deletion
import phonenumber_field.modelfields
import tinymce.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('lesson_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255, verbose_name='название')),
                ('description', tinymce.models.HTMLField(blank=True, default='', verbose_name='описание')),
                ('serial_number', models.IntegerField(verbose_name='последовательность вывода')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='lesons/', verbose_name='Картинка урока')),
            ],
            options={
                'verbose_name': 'урок',
                'verbose_name_plural': 'уроки',
                'db_table': 'lesson',
                'ordering': ['serial_number'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', tinymce.models.HTMLField(verbose_name='описание вопроса')),
                ('serial_number', models.IntegerField(verbose_name='последовательность вывода')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='questions/', verbose_name='тест картинка')),
            ],
            options={
                'verbose_name': 'вопрос',
                'verbose_name_plural': 'вопросы',
                'db_table': 'question',
                'ordering': ['serial_number'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('topic_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255, verbose_name='название')),
                ('description', tinymce.models.HTMLField(blank=True, default='', verbose_name='описание')),
                ('serial_number', models.IntegerField(verbose_name='последовательность вывода')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='topics/', verbose_name='Картинка темы')),
            ],
            options={
                'verbose_name': 'тема',
                'verbose_name_plural': 'темы',
                'db_table': 'topic',
                'ordering': ['serial_number'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('tg_name', models.CharField(db_index=True, max_length=255, verbose_name='Имя пользователя в телеграмме')),
                ('tg_id', models.IntegerField(unique=True, verbose_name='ИД пользователя в телеграмме')),
                ('role', models.CharField(choices=[('admin', 'Администратор'), ('client', 'Клиент'), ('user', 'Пользователь')], default='user', max_length=50, verbose_name='роль пользователя')),
                ('admin_password', models.CharField(blank=True, help_text='Это поле заполняется только для роли "Администратор"', max_length=255, null=True, verbose_name='пароль администратора')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='дата создания объекта')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='Practice',
            fields=[
                ('practice_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='название')),
                ('description', tinymce.models.HTMLField(blank=True, default='', verbose_name='описание')),
                ('exercise', models.FileField(blank=True, null=True, upload_to='exercises/', verbose_name='файл с заданием')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practices', to='app_bot.lesson')),
            ],
            options={
                'verbose_name': 'практическое задание',
                'verbose_name_plural': 'практические задания',
                'db_table': 'practice',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('answer_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', tinymce.models.HTMLField(verbose_name='описание ответа')),
                ('serial_number', models.IntegerField(blank=True, verbose_name='последовательность вывода')),
                ('right', models.BooleanField(verbose_name='метка правильности ответа')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='app_bot.question')),
            ],
            options={
                'verbose_name': 'ответ',
                'verbose_name_plural': 'ответы',
                'db_table': 'answer',
                'ordering': ['serial_number'],
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('test_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='название')),
                ('description', tinymce.models.HTMLField(blank=True, default='', verbose_name='описание')),
                ('show_right_answer', models.BooleanField(default=False)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='app_bot.lesson')),
            ],
            options={
                'verbose_name': 'тест',
                'verbose_name_plural': 'тесты',
                'db_table': 'test',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='app_bot.test'),
        ),
        migrations.AddField(
            model_name='lesson',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='app_bot.topic'),
        ),
        migrations.CreateModel(
            name='UserAvailability',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='availability', serialize=False, to='app_bot.user')),
                ('topic_ids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, db_index=True, default=list, size=None, verbose_name='доступные темы')),
                ('lesson_ids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, db_index=True, default=list, size=None, verbose_name='доступные уроки')),
                ('video_ids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, db_index=True, default=list, size=None, verbose_name='доступные видео')),
                ('test_ids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, db_index=True, default=list, size=None, verbose_name='доступные тесты')),
                ('practice_ids', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, db_index=True, default=list, size=None, verbose_name='доступные практические задания')),
            ],
            options={
                'verbose_name': 'доступный контент',
                'verbose_name_plural': 'доступный контент',
                'db_table': 'useravailability',
            },
        ),
        migrations.CreateModel(
            name='UserContact',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='contact', serialize=False, to='app_bot.user')),
                ('firstname', models.CharField(blank=True, max_length=255, null=True, verbose_name='имя')),
                ('secondname', models.CharField(blank=True, max_length=255, null=True, verbose_name='фамилия')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='город проживания')),
                ('phonenumber', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region='RU', verbose_name='номер телефона')),
            ],
            options={
                'verbose_name': 'контакт',
                'verbose_name_plural': 'контакты',
                'db_table': 'usercontact',
            },
        ),
        migrations.CreateModel(
            name='TopicDone',
            fields=[
                ('topic_done_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_to_done', models.DateTimeField(verbose_name='дата выполнения')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='done_by', to='app_bot.topic', verbose_name='тема')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='topics_done', to='app_bot.user')),
            ],
            options={
                'verbose_name': 'выполненная тема',
                'verbose_name_plural': 'выполненные темы',
                'db_table': 'topicdone',
            },
        ),
        migrations.CreateModel(
            name='TestDone',
            fields=[
                ('test_done_id', models.AutoField(primary_key=True, serialize=False)),
                ('attempt', models.IntegerField(verbose_name='номер попытки')),
                ('result_ok', models.BooleanField(verbose_name='результат попытки')),
                ('date_to_done', models.DateTimeField(verbose_name='дата выполнения теста')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='done_by', to='app_bot.test')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests_done', to='app_bot.user')),
            ],
            options={
                'verbose_name': 'выполненный тест',
                'verbose_name_plural': 'выполненные тесты',
                'db_table': 'testdone',
            },
        ),
        migrations.CreateModel(
            name='PracticeDone',
            fields=[
                ('practice_done_id', models.AutoField(primary_key=True, serialize=False)),
                ('result_ok', models.BooleanField(verbose_name='результат попытки')),
                ('date_to_done', models.DateTimeField(verbose_name='дата выполнения теста')),
                ('practice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='done_by', to='app_bot.practice', verbose_name='практическое задание')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practices_done', to='app_bot.user')),
            ],
            options={
                'verbose_name': 'выполненное практическое задание',
                'verbose_name_plural': 'выполненные практические задания',
                'db_table': 'practicedone',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('payment_id', models.AutoField(primary_key=True, serialize=False)),
                ('payment_date', models.DateTimeField(auto_now_add=True, verbose_name='дата осуществления платежа')),
                ('amount', models.IntegerField(verbose_name='сумма платежа')),
                ('access_date_start', models.DateField(verbose_name='дата начала доступа')),
                ('access_date_finish', models.DateField(verbose_name='дата окончания доступа')),
                ('tariff', models.CharField(max_length=255, verbose_name='тариф')),
                ('status', models.CharField(blank=True, max_length=255, null=True, verbose_name='статус платежа')),
                ('service_description', models.CharField(blank=True, max_length=255, null=True, verbose_name='назначение платежа')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='app_bot.user')),
            ],
            options={
                'verbose_name': 'платеж',
                'verbose_name_plural': 'платежи',
                'db_table': 'payment',
            },
        ),
        migrations.CreateModel(
            name='LessonDone',
            fields=[
                ('lesson_done_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_to_done', models.DateTimeField(verbose_name='дата выполнения')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='done_by', to='app_bot.lesson', verbose_name='урок')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons_done', to='app_bot.user')),
            ],
            options={
                'verbose_name': 'выполненный урок',
                'verbose_name_plural': 'выполненные уроки',
                'db_table': 'lessondone',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('video_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255, verbose_name='название')),
                ('serial_number', models.IntegerField(verbose_name='последовательность вывода')),
                ('video_link', models.URLField(verbose_name='Ссылка на видео')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='app_bot.lesson')),
            ],
            options={
                'verbose_name': 'видео',
                'verbose_name_plural': 'видео',
                'db_table': 'video',
                'ordering': ['serial_number'],
            },
        ),
        migrations.CreateModel(
            name='VideoDone',
            fields=[
                ('video_done_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_to_done', models.DateTimeField(verbose_name='дата просмотра')),
                ('breakpoint_video', models.TimeField(blank=True, null=True, verbose_name='время остановки видео')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos_done', to='app_bot.user')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='done_by', to='app_bot.video')),
            ],
            options={
                'verbose_name': 'просмотренное видео',
                'verbose_name_plural': 'просмотренные видео',
                'db_table': 'videodone',
            },
        ),
        migrations.CreateModel(
            name='VideoSummary',
            fields=[
                ('summary_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='название')),
                ('description', tinymce.models.HTMLField(blank=True, default='', verbose_name='описание')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='video_summary/', verbose_name='картинка для описания')),
                ('video', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='summaries', to='app_bot.video')),
            ],
            options={
                'verbose_name': 'видеоконспект',
                'verbose_name_plural': 'видеоконспекты',
                'db_table': 'videosummary',
            },
        ),
    ]
